# .gitlab-ci.yml
stages:
  - build
  - deploy

# BE 빌드/테스트
# --------------------------------------------------
build_and_test_be:
  stage: build
  image: gradle:8.6-jdk21 # 필요에 따라 다른 이미지로 바꿔주세요
  rules:
    # BE/develop 브랜치에 푸시됐을 때
    - if: '$CI_COMMIT_BRANCH =~ /^BE\/develop$/'
      when: always
    # MR 타겟이 BE/develop 일 때
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "BE/develop"'
      when: always
    - when: never
  script:
    - echo "Building the project"
    - cd $CI_PROJECT_DIR/BE
    - chmod +x gradlew
    - ./gradlew clean build # 테스트까지 포함

# FE 빌드/테스트
# --------------------------------------------------
build_and_test_fe:
  stage: build
  image: node:20-alpine
  variables:
    # Ensure devDependencies (typescript, @types/*) actually get installed
    NODE_ENV: development
    VITE_API_BASE_URL: "http://i13a404.p.ssafy.io:8080"
  rules:
    # FE/develop 브랜치에 푸시됐을 때
    - if: '$CI_COMMIT_BRANCH =~ /^FE\/develop$/'
      when: always
    # MR 타겟이 FE/develop 일 때
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "FE/develop"'
      when: always
    - when: never
  script:
    - cd FE
    - npm ci
    - npm run build
  artifacts:
    paths:
      - FE/dist
    expire_in: 1 hour

# BE 배포
# --------------------------------------------------
deploy_be:
  stage: deploy

  only:
    - /^BE\/develop$/

  image: alpine:latest

  before_script:
    # 1) ssh-agent 실행
    - apk add --no-cache openssh git # Alpine에 ssh/git 설치
    - eval $(ssh-agent -s)

    # 2) 변수에 저장된 프라이빗 키를 ssh-agent에 추가
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    # 3) known_hosts 세팅 (호스트 키 검증)
    - mkdir -p ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 600 ~/.ssh/known_hosts

  script:
    - |
      ssh ubuntu@i13a404.p.ssafy.io <<EOF
        set -e
        cd ~/DuckOn-BE/BE

        git remote set-url origin https://gitlab-ci-token:${CI_JOB_TOKEN}@lab.ssafy.com/s13-webmobile1-sub1/S13P11A404.git
        git fetch origin BE/develop
        git reset --hard origin/BE/develop

        sudo docker build --no-cache -t duckonback:latest .

        # dev 이름/포트로 배포
        sudo docker rm -f duckon-app-dev || true
        sudo docker run -d \
          --name duckon-app-dev \
          --network duckon-net \
          -p 8080:8080 \
          --env-file /home/ubuntu/dev.env \
          duckonback:latest
      EOF

# FE 배포
# --------------------------------------------------
deploy_fe:
  stage: deploy
  image: alpine:latest
  variables:
    VITE_API_BASE_URL: "/api"
  only:
    - /^FE\/develop$/
  before_script:
    - apk add --no-cache openssh-client git
    - eval "$(ssh-agent -s)"
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 600 ~/.ssh/known_hosts
  script:
    - |
      ssh ubuntu@i13a404.p.ssafy.io <<EOF
        set -e

        # 네트워크가 없으면 생성
        sudo docker network create duckon-net || true

        # FE 코드 갱신
        cd ~/DuckOn-BE/FE
        git remote set-url origin https://gitlab-ci-token:${CI_JOB_TOKEN}@lab.ssafy.com/s13-webmobile1-sub1/S13P11A404.git
        git fetch origin FE/develop
        git reset --hard origin/FE/develop

        # FE 도커 이미지 빌드 & 재실행 (빌드타임 ARG 주입)
       sudo docker build --no-cache \
          --build-arg VITE_API_BASE_URL=/api \
          -t duckon-front:latest .

        sudo docker rm -f duckon-front-dev || true
        sudo docker run -d \
          --name duckon-front-dev \
          -p 8081:80 \
          --network duckon-net \
          duckon-front:latest
      EOF
